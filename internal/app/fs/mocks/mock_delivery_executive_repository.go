// Code generated by MockGen. DO NOT EDIT.
// Source: repository/delivery_executive_repository.go

// Package repository is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDeliveryExecutiveRepository is a mock of DeliveryExecutiveRepository interface.
type MockDeliveryExecutiveRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeliveryExecutiveRepositoryMockRecorder
}

// MockDeliveryExecutiveRepositoryMockRecorder is the mock recorder for MockDeliveryExecutiveRepository.
type MockDeliveryExecutiveRepositoryMockRecorder struct {
	mock *MockDeliveryExecutiveRepository
}

// NewMockDeliveryExecutiveRepository creates a new mock instance.
func NewMockDeliveryExecutiveRepository(ctrl *gomock.Controller) *MockDeliveryExecutiveRepository {
	mock := &MockDeliveryExecutiveRepository{ctrl: ctrl}
	mock.recorder = &MockDeliveryExecutiveRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeliveryExecutiveRepository) EXPECT() *MockDeliveryExecutiveRepositoryMockRecorder {
	return m.recorder
}

// GetDeliveryExecutive mocks base method.
func (m *MockDeliveryExecutiveRepository) GetDeliveryExecutive(id int32) (bool, int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeliveryExecutive", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(int32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDeliveryExecutive indicates an expected call of GetDeliveryExecutive.
func (mr *MockDeliveryExecutiveRepositoryMockRecorder) GetDeliveryExecutive(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliveryExecutive", reflect.TypeOf((*MockDeliveryExecutiveRepository)(nil).GetDeliveryExecutive), id)
}

// SaveDeliveryExecutive mocks base method.
func (m *MockDeliveryExecutiveRepository) SaveDeliveryExecutive(location string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDeliveryExecutive", location)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveDeliveryExecutive indicates an expected call of SaveDeliveryExecutive.
func (mr *MockDeliveryExecutiveRepositoryMockRecorder) SaveDeliveryExecutive(location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDeliveryExecutive", reflect.TypeOf((*MockDeliveryExecutiveRepository)(nil).SaveDeliveryExecutive), location)
}

// UpdateDeliveryExecutiveStatus mocks base method.
func (m *MockDeliveryExecutiveRepository) UpdateDeliveryExecutiveStatus(isAvailable bool, orderID, deliveryExecutiveId int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeliveryExecutiveStatus", isAvailable, orderID, deliveryExecutiveId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeliveryExecutiveStatus indicates an expected call of UpdateDeliveryExecutiveStatus.
func (mr *MockDeliveryExecutiveRepositoryMockRecorder) UpdateDeliveryExecutiveStatus(isAvailable, orderID, deliveryExecutiveId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeliveryExecutiveStatus", reflect.TypeOf((*MockDeliveryExecutiveRepository)(nil).UpdateDeliveryExecutiveStatus), isAvailable, orderID, deliveryExecutiveId)
}
