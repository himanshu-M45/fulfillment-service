// Code generated by MockGen. DO NOT EDIT.
// Source: proto/fulfillment_service_grpc.pb.go

// Package proto is a generated GoMock package.
package mocks

import (
	context "context"
	fulfillment_service "fulfillment-service/proto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockFulfillmentServiceClient is a mock of FulfillmentServiceClient interface.
type MockFulfillmentServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFulfillmentServiceClientMockRecorder
}

// MockFulfillmentServiceClientMockRecorder is the mock recorder for MockFulfillmentServiceClient.
type MockFulfillmentServiceClientMockRecorder struct {
	mock *MockFulfillmentServiceClient
}

// NewMockFulfillmentServiceClient creates a new mock instance.
func NewMockFulfillmentServiceClient(ctrl *gomock.Controller) *MockFulfillmentServiceClient {
	mock := &MockFulfillmentServiceClient{ctrl: ctrl}
	mock.recorder = &MockFulfillmentServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFulfillmentServiceClient) EXPECT() *MockFulfillmentServiceClientMockRecorder {
	return m.recorder
}

// AddDeliveryExecutive mocks base method.
func (m *MockFulfillmentServiceClient) AddDeliveryExecutive(ctx context.Context, in *fulfillment_service.AddDERequest, opts ...grpc.CallOption) (*fulfillment_service.AddDEResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddDeliveryExecutive", varargs...)
	ret0, _ := ret[0].(*fulfillment_service.AddDEResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDeliveryExecutive indicates an expected call of AddDeliveryExecutive.
func (mr *MockFulfillmentServiceClientMockRecorder) AddDeliveryExecutive(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDeliveryExecutive", reflect.TypeOf((*MockFulfillmentServiceClient)(nil).AddDeliveryExecutive), varargs...)
}

// AssignDE mocks base method.
func (m *MockFulfillmentServiceClient) AssignDE(ctx context.Context, in *fulfillment_service.AssignDERequest, opts ...grpc.CallOption) (*fulfillment_service.AssignDEResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssignDE", varargs...)
	ret0, _ := ret[0].(*fulfillment_service.AssignDEResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignDE indicates an expected call of AssignDE.
func (mr *MockFulfillmentServiceClientMockRecorder) AssignDE(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignDE", reflect.TypeOf((*MockFulfillmentServiceClient)(nil).AssignDE), varargs...)
}

// UpdateOrderStatus mocks base method.
func (m *MockFulfillmentServiceClient) UpdateOrderStatus(ctx context.Context, in *fulfillment_service.UpdateStatusRequest, opts ...grpc.CallOption) (*fulfillment_service.UpdateStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOrderStatus", varargs...)
	ret0, _ := ret[0].(*fulfillment_service.UpdateStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockFulfillmentServiceClientMockRecorder) UpdateOrderStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockFulfillmentServiceClient)(nil).UpdateOrderStatus), varargs...)
}

// MockFulfillmentServiceServer is a mock of FulfillmentServiceServer interface.
type MockFulfillmentServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockFulfillmentServiceServerMockRecorder
}

// MockFulfillmentServiceServerMockRecorder is the mock recorder for MockFulfillmentServiceServer.
type MockFulfillmentServiceServerMockRecorder struct {
	mock *MockFulfillmentServiceServer
}

// NewMockFulfillmentServiceServer creates a new mock instance.
func NewMockFulfillmentServiceServer(ctrl *gomock.Controller) *MockFulfillmentServiceServer {
	mock := &MockFulfillmentServiceServer{ctrl: ctrl}
	mock.recorder = &MockFulfillmentServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFulfillmentServiceServer) EXPECT() *MockFulfillmentServiceServerMockRecorder {
	return m.recorder
}

// AddDeliveryExecutive mocks base method.
func (m *MockFulfillmentServiceServer) AddDeliveryExecutive(arg0 context.Context, arg1 *fulfillment_service.AddDERequest) (*fulfillment_service.AddDEResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDeliveryExecutive", arg0, arg1)
	ret0, _ := ret[0].(*fulfillment_service.AddDEResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDeliveryExecutive indicates an expected call of AddDeliveryExecutive.
func (mr *MockFulfillmentServiceServerMockRecorder) AddDeliveryExecutive(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDeliveryExecutive", reflect.TypeOf((*MockFulfillmentServiceServer)(nil).AddDeliveryExecutive), arg0, arg1)
}

// AssignDE mocks base method.
func (m *MockFulfillmentServiceServer) AssignDE(arg0 context.Context, arg1 *fulfillment_service.AssignDERequest) (*fulfillment_service.AssignDEResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignDE", arg0, arg1)
	ret0, _ := ret[0].(*fulfillment_service.AssignDEResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignDE indicates an expected call of AssignDE.
func (mr *MockFulfillmentServiceServerMockRecorder) AssignDE(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignDE", reflect.TypeOf((*MockFulfillmentServiceServer)(nil).AssignDE), arg0, arg1)
}

// UpdateOrderStatus mocks base method.
func (m *MockFulfillmentServiceServer) UpdateOrderStatus(arg0 context.Context, arg1 *fulfillment_service.UpdateStatusRequest) (*fulfillment_service.UpdateStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", arg0, arg1)
	ret0, _ := ret[0].(*fulfillment_service.UpdateStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockFulfillmentServiceServerMockRecorder) UpdateOrderStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockFulfillmentServiceServer)(nil).UpdateOrderStatus), arg0, arg1)
}

// mustEmbedUnimplementedFulfillmentServiceServer mocks base method.
func (m *MockFulfillmentServiceServer) mustEmbedUnimplementedFulfillmentServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFulfillmentServiceServer")
}

// mustEmbedUnimplementedFulfillmentServiceServer indicates an expected call of mustEmbedUnimplementedFulfillmentServiceServer.
func (mr *MockFulfillmentServiceServerMockRecorder) mustEmbedUnimplementedFulfillmentServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFulfillmentServiceServer", reflect.TypeOf((*MockFulfillmentServiceServer)(nil).mustEmbedUnimplementedFulfillmentServiceServer))
}

// MockUnsafeFulfillmentServiceServer is a mock of UnsafeFulfillmentServiceServer interface.
type MockUnsafeFulfillmentServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeFulfillmentServiceServerMockRecorder
}

// MockUnsafeFulfillmentServiceServerMockRecorder is the mock recorder for MockUnsafeFulfillmentServiceServer.
type MockUnsafeFulfillmentServiceServerMockRecorder struct {
	mock *MockUnsafeFulfillmentServiceServer
}

// NewMockUnsafeFulfillmentServiceServer creates a new mock instance.
func NewMockUnsafeFulfillmentServiceServer(ctrl *gomock.Controller) *MockUnsafeFulfillmentServiceServer {
	mock := &MockUnsafeFulfillmentServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeFulfillmentServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeFulfillmentServiceServer) EXPECT() *MockUnsafeFulfillmentServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedFulfillmentServiceServer mocks base method.
func (m *MockUnsafeFulfillmentServiceServer) mustEmbedUnimplementedFulfillmentServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFulfillmentServiceServer")
}

// mustEmbedUnimplementedFulfillmentServiceServer indicates an expected call of mustEmbedUnimplementedFulfillmentServiceServer.
func (mr *MockUnsafeFulfillmentServiceServerMockRecorder) mustEmbedUnimplementedFulfillmentServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFulfillmentServiceServer", reflect.TypeOf((*MockUnsafeFulfillmentServiceServer)(nil).mustEmbedUnimplementedFulfillmentServiceServer))
}
