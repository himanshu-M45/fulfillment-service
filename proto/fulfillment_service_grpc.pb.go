// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: proto/fulfillment_service.proto

package fulfillment_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FulfillmentService_AddDeliveryExecutive_FullMethodName = "/fulfillment_service.FulfillmentService/AddDeliveryExecutive"
	FulfillmentService_AssignDE_FullMethodName             = "/fulfillment_service.FulfillmentService/AssignDE"
	FulfillmentService_UpdateOrderStatus_FullMethodName    = "/fulfillment_service.FulfillmentService/UpdateOrderStatus"
)

// FulfillmentServiceClient is the client API for FulfillmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FulfillmentServiceClient interface {
	AddDeliveryExecutive(ctx context.Context, in *AddDERequest, opts ...grpc.CallOption) (*AddDEResponse, error)
	AssignDE(ctx context.Context, in *AssignDERequest, opts ...grpc.CallOption) (*AssignDEResponse, error)
	UpdateOrderStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*UpdateStatusResponse, error)
}

type fulfillmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFulfillmentServiceClient(cc grpc.ClientConnInterface) FulfillmentServiceClient {
	return &fulfillmentServiceClient{cc}
}

func (c *fulfillmentServiceClient) AddDeliveryExecutive(ctx context.Context, in *AddDERequest, opts ...grpc.CallOption) (*AddDEResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDEResponse)
	err := c.cc.Invoke(ctx, FulfillmentService_AddDeliveryExecutive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulfillmentServiceClient) AssignDE(ctx context.Context, in *AssignDERequest, opts ...grpc.CallOption) (*AssignDEResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignDEResponse)
	err := c.cc.Invoke(ctx, FulfillmentService_AssignDE_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulfillmentServiceClient) UpdateOrderStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*UpdateStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStatusResponse)
	err := c.cc.Invoke(ctx, FulfillmentService_UpdateOrderStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FulfillmentServiceServer is the server API for FulfillmentService service.
// All implementations must embed UnimplementedFulfillmentServiceServer
// for forward compatibility.
type FulfillmentServiceServer interface {
	AddDeliveryExecutive(context.Context, *AddDERequest) (*AddDEResponse, error)
	AssignDE(context.Context, *AssignDERequest) (*AssignDEResponse, error)
	UpdateOrderStatus(context.Context, *UpdateStatusRequest) (*UpdateStatusResponse, error)
	mustEmbedUnimplementedFulfillmentServiceServer()
}

// UnimplementedFulfillmentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFulfillmentServiceServer struct{}

func (UnimplementedFulfillmentServiceServer) AddDeliveryExecutive(context.Context, *AddDERequest) (*AddDEResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDeliveryExecutive not implemented")
}
func (UnimplementedFulfillmentServiceServer) AssignDE(context.Context, *AssignDERequest) (*AssignDEResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignDE not implemented")
}
func (UnimplementedFulfillmentServiceServer) UpdateOrderStatus(context.Context, *UpdateStatusRequest) (*UpdateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderStatus not implemented")
}
func (UnimplementedFulfillmentServiceServer) mustEmbedUnimplementedFulfillmentServiceServer() {}
func (UnimplementedFulfillmentServiceServer) testEmbeddedByValue()                            {}

// UnsafeFulfillmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FulfillmentServiceServer will
// result in compilation errors.
type UnsafeFulfillmentServiceServer interface {
	mustEmbedUnimplementedFulfillmentServiceServer()
}

func RegisterFulfillmentServiceServer(s grpc.ServiceRegistrar, srv FulfillmentServiceServer) {
	// If the following call pancis, it indicates UnimplementedFulfillmentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FulfillmentService_ServiceDesc, srv)
}

func _FulfillmentService_AddDeliveryExecutive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulfillmentServiceServer).AddDeliveryExecutive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FulfillmentService_AddDeliveryExecutive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulfillmentServiceServer).AddDeliveryExecutive(ctx, req.(*AddDERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FulfillmentService_AssignDE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignDERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulfillmentServiceServer).AssignDE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FulfillmentService_AssignDE_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulfillmentServiceServer).AssignDE(ctx, req.(*AssignDERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FulfillmentService_UpdateOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulfillmentServiceServer).UpdateOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FulfillmentService_UpdateOrderStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulfillmentServiceServer).UpdateOrderStatus(ctx, req.(*UpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FulfillmentService_ServiceDesc is the grpc.ServiceDesc for FulfillmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FulfillmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fulfillment_service.FulfillmentService",
	HandlerType: (*FulfillmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDeliveryExecutive",
			Handler:    _FulfillmentService_AddDeliveryExecutive_Handler,
		},
		{
			MethodName: "AssignDE",
			Handler:    _FulfillmentService_AssignDE_Handler,
		},
		{
			MethodName: "UpdateOrderStatus",
			Handler:    _FulfillmentService_UpdateOrderStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/fulfillment_service.proto",
}
